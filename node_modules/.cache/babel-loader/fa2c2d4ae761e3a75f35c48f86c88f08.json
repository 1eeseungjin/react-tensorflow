{"ast":null,"code":"var _jsxFileName = \"/Users/iseungjin/Downloads/react-object-detection-master/src/components/objectDetector/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"@tensorflow/tfjs-backend-cpu\"; //import \"@tensorflow/tfjs-backend-webgl\";\n\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ObjectDetectorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n_c = ObjectDetectorContainer;\nconst DetectorContainer = styled.div`\n  min-width: 200px;\n  height: 500px;\n  border: 3px solid #fff;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n`;\n_c2 = DetectorContainer;\nconst TargetImg = styled.img`\n  height: 100%;\n`;\n_c3 = TargetImg;\nconst HiddenFileInput = styled.input`\n  display: none;\n`;\n_c4 = HiddenFileInput;\nconst SelectButton = styled.button`\n  padding: 7px 10px;\n  border: 2px solid transparent;\n  background-color: #fff;\n  color: #0a0f22;\n  font-size: 16px;\n  font-weight: 500;\n  outline: none;\n  margin-top: 2em;\n  cursor: pointer;\n  transition: all 260ms ease-in-out;\n\n  &:hover {\n    background-color: transparent;\n    border: 2px solid #fff;\n    color: #fff;\n  }\n`;\n_c5 = SelectButton;\nconst TargetBox = styled.div`\n  position: absolute;\n\n  left: ${({\n  x\n}) => x + \"px\"};\n  top: ${({\n  y\n}) => y + \"px\"};\n  width: ${({\n  width\n}) => width + \"px\"};\n  height: ${({\n  height\n}) => height + \"px\"};\n\n  border: 4px solid #1ac71a;\n  background-color: transparent;\n  z-index: 20;\n\n  &::before {\n    content: \"${({\n  classType,\n  score\n}) => `${classType} ${score.toFixed(1)}%`}\";\n    color: #1ac71a;\n    font-weight: 500;\n    font-size: 17px;\n    position: absolute;\n    top: -1.5em;\n    left: -5px;\n  }\n`;\n_c6 = TargetBox;\nexport function ObjectDetector(props) {\n  _s();\n\n  const fileInputRef = useRef();\n  const imageRef = useRef();\n  const [imgData, setImgData] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const isEmptyPredictions = !predictions || predictions.length === 0;\n\n  const openFilePicker = () => {\n    if (fileInputRef.current) fileInputRef.current.click();\n  };\n\n  const normalizePredictions = (predictions, imgSize) => {\n    if (!predictions || !imgSize || !imageRef) return predictions || [];\n    return predictions.map(prediction => {\n      const {\n        bbox\n      } = prediction;\n      const oldX = bbox[0];\n      const oldY = bbox[1];\n      const oldWidth = bbox[2];\n      const oldHeight = bbox[3];\n      const imgWidth = imageRef.current.width;\n      const imgHeight = imageRef.current.height;\n      const x = oldX * imgWidth / imgSize.width;\n      const y = oldY * imgHeight / imgSize.height;\n      const width = oldWidth * imgWidth / imgSize.width;\n      const height = oldHeight * imgHeight / imgSize.height;\n      return { ...prediction,\n        bbox: [x, y, width, height]\n      };\n    });\n  };\n\n  const detectObjectsOnImage = async (imageElement, imgSize) => {\n    const model = await cocoSsd.load({});\n    const predictions = await model.detect(imageElement, 6);\n    const normalizedPredictions = normalizePredictions(predictions, imgSize);\n    setPredictions(normalizedPredictions);\n    console.log(\"Predictions: \", predictions);\n  };\n\n  const readImage = file => {\n    return new Promise((rs, rj) => {\n      const fileReader = new FileReader();\n\n      fileReader.onload = () => rs(fileReader.result);\n\n      fileReader.onerror = () => rj(fileReader.error);\n\n      fileReader.readAsDataURL(file);\n    });\n  };\n\n  const onSelectImage = async e => {\n    setPredictions([]);\n    setLoading(true);\n    const file = e.target.files[0];\n    const imgData = await readImage(file);\n    setImgData(imgData);\n    const imageElement = document.createElement(\"img\");\n    imageElement.src = imgData;\n\n    imageElement.onload = async () => {\n      const imgSize = {\n        width: imageElement.width,\n        height: imageElement.height\n      };\n      await detectObjectsOnImage(imageElement, imgSize);\n      setLoading(false);\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(ObjectDetectorContainer, {\n    children: [/*#__PURE__*/_jsxDEV(DetectorContainer, {\n      children: [imgData && /*#__PURE__*/_jsxDEV(TargetImg, {\n        src: imgData,\n        ref: imageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), !isEmptyPredictions && predictions.map((prediction, idx) => /*#__PURE__*/_jsxDEV(TargetBox, {\n        x: prediction.bbox[0],\n        y: prediction.bbox[1],\n        width: prediction.bbox[2],\n        height: prediction.bbox[3],\n        classType: prediction.class,\n        score: prediction.score * 100\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HiddenFileInput, {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: onSelectImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SelectButton, {\n      onClick: openFilePicker,\n      children: isLoading ? \"Recognizing...\" : \"이미지를 첨부해주세요\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ObjectDetector, \"0F6IHk0iAC0fXk38QmgjuiDnL9Y=\");\n\n_c7 = ObjectDetector;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ObjectDetectorContainer\");\n$RefreshReg$(_c2, \"DetectorContainer\");\n$RefreshReg$(_c3, \"TargetImg\");\n$RefreshReg$(_c4, \"HiddenFileInput\");\n$RefreshReg$(_c5, \"SelectButton\");\n$RefreshReg$(_c6, \"TargetBox\");\n$RefreshReg$(_c7, \"ObjectDetector\");","map":{"version":3,"sources":["/Users/iseungjin/Downloads/react-object-detection-master/src/components/objectDetector/index.jsx"],"names":["React","useRef","useState","styled","cocoSsd","ObjectDetectorContainer","div","DetectorContainer","TargetImg","img","HiddenFileInput","input","SelectButton","button","TargetBox","x","y","width","height","classType","score","toFixed","ObjectDetector","props","fileInputRef","imageRef","imgData","setImgData","predictions","setPredictions","isLoading","setLoading","isEmptyPredictions","length","openFilePicker","current","click","normalizePredictions","imgSize","map","prediction","bbox","oldX","oldY","oldWidth","oldHeight","imgWidth","imgHeight","detectObjectsOnImage","imageElement","model","load","detect","normalizedPredictions","console","log","readImage","file","Promise","rs","rj","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","onSelectImage","e","target","files","document","createElement","src","idx","class"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"@tensorflow/tfjs-backend-cpu\";\n//import \"@tensorflow/tfjs-backend-webgl\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n\nconst ObjectDetectorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst DetectorContainer = styled.div`\n  min-width: 200px;\n  height: 500px;\n  border: 3px solid #fff;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n`;\n\nconst TargetImg = styled.img`\n  height: 100%;\n`;\n\nconst HiddenFileInput = styled.input`\n  display: none;\n`;\n\nconst SelectButton = styled.button`\n  padding: 7px 10px;\n  border: 2px solid transparent;\n  background-color: #fff;\n  color: #0a0f22;\n  font-size: 16px;\n  font-weight: 500;\n  outline: none;\n  margin-top: 2em;\n  cursor: pointer;\n  transition: all 260ms ease-in-out;\n\n  &:hover {\n    background-color: transparent;\n    border: 2px solid #fff;\n    color: #fff;\n  }\n`;\n\nconst TargetBox = styled.div`\n  position: absolute;\n\n  left: ${({ x }) => x + \"px\"};\n  top: ${({ y }) => y + \"px\"};\n  width: ${({ width }) => width + \"px\"};\n  height: ${({ height }) => height + \"px\"};\n\n  border: 4px solid #1ac71a;\n  background-color: transparent;\n  z-index: 20;\n\n  &::before {\n    content: \"${({ classType, score }) => `${classType} ${score.toFixed(1)}%`}\";\n    color: #1ac71a;\n    font-weight: 500;\n    font-size: 17px;\n    position: absolute;\n    top: -1.5em;\n    left: -5px;\n  }\n`;\n\nexport function ObjectDetector(props) {\n  const fileInputRef = useRef();\n  const imageRef = useRef();\n  const [imgData, setImgData] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const isEmptyPredictions = !predictions || predictions.length === 0;\n\n  const openFilePicker = () => {\n    if (fileInputRef.current) fileInputRef.current.click();\n  };\n\n  const normalizePredictions = (predictions, imgSize) => {\n    if (!predictions || !imgSize || !imageRef) return predictions || [];\n    return predictions.map((prediction) => {\n      const { bbox } = prediction;\n      const oldX = bbox[0];\n      const oldY = bbox[1];\n      const oldWidth = bbox[2];\n      const oldHeight = bbox[3];\n\n      const imgWidth = imageRef.current.width;\n      const imgHeight = imageRef.current.height;\n\n      const x = (oldX * imgWidth) / imgSize.width;\n      const y = (oldY * imgHeight) / imgSize.height;\n      const width = (oldWidth * imgWidth) / imgSize.width;\n      const height = (oldHeight * imgHeight) / imgSize.height;\n\n      return { ...prediction, bbox: [x, y, width, height] };\n    });\n  };\n\n  const detectObjectsOnImage = async (imageElement, imgSize) => {\n    const model = await cocoSsd.load({});\n    const predictions = await model.detect(imageElement, 6);\n    const normalizedPredictions = normalizePredictions(predictions, imgSize);\n    setPredictions(normalizedPredictions);\n    console.log(\"Predictions: \", predictions);\n  };\n\n  const readImage = (file) => {\n    return new Promise((rs, rj) => {\n      const fileReader = new FileReader();\n      fileReader.onload = () => rs(fileReader.result);\n      fileReader.onerror = () => rj(fileReader.error);\n      fileReader.readAsDataURL(file);\n    });\n  };\n\n  const onSelectImage = async (e) => {\n    setPredictions([]);\n    setLoading(true);\n\n    const file = e.target.files[0];\n    const imgData = await readImage(file);\n    setImgData(imgData);\n\n    const imageElement = document.createElement(\"img\");\n    imageElement.src = imgData;\n\n    imageElement.onload = async () => {\n      const imgSize = {\n        width: imageElement.width,\n        height: imageElement.height,\n      };\n      await detectObjectsOnImage(imageElement, imgSize);\n      setLoading(false);\n    };\n  };\n\n  return (\n    <ObjectDetectorContainer>\n      <DetectorContainer>\n        {imgData && <TargetImg src={imgData} ref={imageRef} />}\n        {!isEmptyPredictions &&\n          predictions.map((prediction, idx) => (\n            <TargetBox\n              key={idx}\n              x={prediction.bbox[0]}\n              y={prediction.bbox[1]}\n              width={prediction.bbox[2]}\n              height={prediction.bbox[3]}\n              classType={prediction.class}\n              score={prediction.score * 100}\n            />\n          ))}\n      </DetectorContainer>\n      <HiddenFileInput\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={onSelectImage}\n      />\n      <SelectButton onClick={openFilePicker}>\n        {isLoading ? \"Recognizing...\" : \"이미지를 첨부해주세요\"}\n      </SelectButton>\n    </ObjectDetectorContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}